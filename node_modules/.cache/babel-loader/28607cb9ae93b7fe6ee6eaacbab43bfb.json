{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authenticate } from \"../../utils/apiClient\";\nconst userDateLocalStorageKey = \"authState\";\nexport const login = createAsyncThunk(\"auth/requestStatus\", async ({\n  email,\n  password\n}) => {\n  const userData = await authenticate({\n    email,\n    password\n  });\n  return userData;\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    // reads the 'cached' user data from the local storage so even if user refreshes, he stays logged in\n    userData: JSON.parse(localStorage.getItem(userDateLocalStorageKey)),\n    isLoading: false\n  },\n  reducers: {},\n  extraReducers: {\n    [login.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userData = action.payload;\n      state.isLoading = false; // saves user info (which includes the token) in local storage, so it will be saved between refreshes,\n      // as requested\n\n      localStorage.setItem(userDateLocalStorageKey, JSON.stringify(action.payload.token));\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoading = false;\n    }\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/97250/zigit/src/modules/LoginPage/authSlice.js"],"names":["createSlice","createAsyncThunk","authenticate","userDateLocalStorageKey","login","email","password","userData","authSlice","name","initialState","JSON","parse","localStorage","getItem","isLoading","reducers","extraReducers","pending","state","action","fulfilled","payload","setItem","stringify","token","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,MAAMC,uBAAuB,GAAG,WAAhC;AAEA,OAAO,MAAMC,KAAK,GAAGH,gBAAgB,CACnC,oBADmC,EAEnC,OAAO;AAAEI,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAP,KAA+B;AAC7B,QAAMC,QAAQ,GAAG,MAAML,YAAY,CAAC;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAAnC;AACA,SAAOC,QAAP;AACD,CALkC,CAA9B;AAQP,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCS,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZ;AACAH,IAAAA,QAAQ,EAAEI,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBX,uBAArB,CAAX,CAFE;AAGZY,IAAAA,SAAS,EAAE;AAHC,GAFqB;AAOnCC,EAAAA,QAAQ,EAAE,EAPyB;AAQnCC,EAAAA,aAAa,EAAE;AACb,KAACb,KAAK,CAACc,OAAP,GAAiB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACD,KAHY;AAIb,KAACX,KAAK,CAACiB,SAAP,GAAmB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB,CAFoC,CAGpC;AACA;;AACAF,MAAAA,YAAY,CAACU,OAAb,CACEpB,uBADF,EAEEQ,IAAI,CAACa,SAAL,CAAeJ,MAAM,CAACE,OAAP,CAAeG,KAA9B,CAFF;AAID,KAbY;AAcb,KAACrB,KAAK,CAACsB,QAAP,GAAkB,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACD;AAhBY;AARoB,CAAD,CAA7B;AA4BP,eAAeP,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authenticate } from \"../../utils/apiClient\";\nconst userDateLocalStorageKey = \"authState\";\n\nexport const login = createAsyncThunk(\n  \"auth/requestStatus\",\n  async ({ email, password }) => {\n    const userData = await authenticate({ email, password });\n    return userData;\n  }\n);\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    // reads the 'cached' user data from the local storage so even if user refreshes, he stays logged in\n    userData: JSON.parse(localStorage.getItem(userDateLocalStorageKey)),\n    isLoading: false,\n  },\n  reducers: {},\n  extraReducers: {\n    [login.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userData = action.payload;\n      state.isLoading = false;\n      // saves user info (which includes the token) in local storage, so it will be saved between refreshes,\n      // as requested\n      localStorage.setItem(\n        userDateLocalStorageKey,\n        JSON.stringify(action.payload.token)\n      );\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoading = false;\n    },\n  },\n});\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}