{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97250\\\\zigit\\\\src\\\\modules\\\\LoginPage\\\\LoginPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"./authSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./LoginPage.css\";\nimport { validatePassword, validateEmail } from \"../../utils/formValidations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LoginPage() {\n  _s();\n\n  const history = useHistory();\n  const isLoading = useSelector(state => state.auth.isLoading);\n  const dispatch = useDispatch();\n  console.log(isLoading); // using formik for form state management, no need for redux here..\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate: values => {\n      // returns error object, if empty then there are not errors and the form is valid\n      return { ...validateEmail(values.email),\n        ...validatePassword(values.password)\n      };\n    },\n    onSubmit: values => {\n      dispatch(login(values)).then(() => {\n        history.push(\"/info\");\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page-component-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 10,\n        className: \"login-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-input\",\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              error: formik.errors.email,\n              helperText: formik.errors.email,\n              fullWidth: true,\n              required: true,\n              label: \"Email\",\n              name: \"email\",\n              placeholder: \"Enter Email\",\n              onChange: formik.handleChange,\n              value: formik.values.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-input\",\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              error: formik.errors.password,\n              helperText: formik.errors.password,\n              fullWidth: true,\n              label: \"Password\",\n              name: \"password\",\n              placeholder: \"Enter Password\",\n              type: \"password\",\n              onChange: formik.handleChange,\n              value: formik.values.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-input\",\n            children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"primary\",\n              fullWidth: true,\n              variant: \"contained\",\n              disabled: !formik.dirty || !formik.isValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginPage, \"ClYuMbu3FrgvJI4keQrl80vQOLM=\", false, function () {\n  return [useHistory, useSelector, useDispatch, useFormik];\n});\n\n_c = LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["C:/Users/97250/zigit/src/modules/LoginPage/LoginPage.jsx"],"names":["useFormik","React","Card","Button","TextField","CircularProgress","useHistory","login","useSelector","useDispatch","validatePassword","validateEmail","LoginPage","history","isLoading","state","auth","dispatch","console","log","formik","initialValues","email","password","validate","values","onSubmit","then","push","handleSubmit","errors","handleChange","dirty","isValid"],"mappings":"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","sourcesContent":["import { useFormik } from \"formik\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"./authSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport \"./LoginPage.css\";\nimport { validatePassword, validateEmail } from \"../../utils/formValidations\";\n\nexport function LoginPage() {\n  const history = useHistory();\n  const isLoading = useSelector((state) => state.auth.isLoading);\n  const dispatch = useDispatch();\n  console.log(isLoading);\n\n  // using formik for form state management, no need for redux here..\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    validate: (values) => {\n      // returns error object, if empty then there are not errors and the form is valid\n      return {\n        ...validateEmail(values.email),\n        ...validatePassword(values.password),\n      };\n    },\n    onSubmit: (values) => {\n      dispatch(login(values)).then(() => {\n        history.push(\"/info\");\n      });\n    },\n  });\n\n  return (\n    <div className=\"login-page-component-container\">\n      <form onSubmit={formik.handleSubmit}>\n        <Card elevation={10} className=\"login-card\">\n          <div className=\"card-content\">\n            <div className=\"card-input\">\n              <TextField\n                error={formik.errors.email}\n                helperText={formik.errors.email}\n                fullWidth={true}\n                required\n                label=\"Email\"\n                name=\"email\"\n                placeholder=\"Enter Email\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n              />\n            </div>\n\n            <div className=\"card-input\">\n              <TextField\n                required\n                error={formik.errors.password}\n                helperText={formik.errors.password}\n                fullWidth={true}\n                label=\"Password\"\n                name=\"password\"\n                placeholder=\"Enter Password\"\n                type=\"password\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n              />\n            </div>\n\n            <div className=\"card-input\">\n              {isLoading ? (\n                <CircularProgress color=\"secondary\" />\n              ) : (\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  fullWidth={true}\n                  variant=\"contained\"\n                  disabled={!formik.dirty || !formik.isValid}\n                >\n                  Login\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}